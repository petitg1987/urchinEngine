#version 450

layout(constant_id = 0) const uint KERNEL_SAMPLES = 64; //must be equals to AmbientOcclusionManager::KERNEL_SAMPLES_SHADER_LIMIT
layout(constant_id = 1) const float RADIUS = 0.0;
layout(constant_id = 2) const float AO_STRENGTH = 0.0;
layout(constant_id = 3) const float DISTANCE_START_ATTENUATION = 0.0;
layout(constant_id = 4) const float DISTANCE_END_ATTENUATION = 0.0;
layout(constant_id = 5) const uint NOISE_TEXTURE_SIZE = 0;
layout(constant_id = 6) const float BIAS = 0.0;

layout (local_size_x = 16, local_size_y = 16) in;
layout(std140, set = 0, binding = 0) uniform Projection {
    mat4 mInverseProjection;
    mat4 mProjection;
} projection;
layout(std140, set = 0, binding = 1) uniform PositioningData {
    mat4 mInverseViewProjection;
    mat4 mView;
} positioningData;
layout(std140, set = 0, binding = 2) uniform KernelData {
    vec4 samples[KERNEL_SAMPLES];
} kernelData;
layout(std140, set = 0, binding = 3) uniform Scene {
    vec2 aoResolution;
} scene;
layout (binding = 4, r32f) uniform readonly image2D depthTex;
layout (binding = 5, rgba8ui) uniform readonly uimage2D normalAndAmbientTex;
layout (binding = 6, rgba8ui) uniform readonly uimage2D noiseTex;
//layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

void main() {
    vec3 pixel = imageLoad(normalAndAmbientTex, ivec2(gl_GlobalInvocationID.xy)).rgb;
}
