#version 460

layout(constant_id = 0) const uint KERNEL_SAMPLES = 64; //must be equals to AmbientOcclusionManager::KERNEL_SAMPLES_SHADER_LIMIT
layout(constant_id = 1) const float RADIUS = 0.0;
layout(constant_id = 2) const float DISTANCE_START_ATTENUATION = 0.0;
layout(constant_id = 3) const float DISTANCE_END_ATTENUATION = 0.0;
layout(constant_id = 4) const float BIAS_MULTIPLIER = 0.0;
layout(constant_id = 5) const float BIAS_DISTANCE_MULTIPLIER = 0.0;

layout(local_size_x = 8, local_size_y = 8) in;
layout(std140, set = 0, binding = 0) uniform Projection {
    mat4 mInverseProjection;
    mat4 mProjection;
} projection;
layout(std140, set = 0, binding = 1) uniform PositioningData {
    mat4 mInverseViewProjection;
    mat4 mView;
} positioningData;
layout(std140, set = 0, binding = 2) uniform KernelData {
    vec4 samples[KERNEL_SAMPLES];
} kernelData;
layout(binding = 3) uniform sampler2D depthTex;
layout(binding = 4) uniform sampler2D normalAndAmbientTex;
layout(binding = 5) uniform sampler2D noiseTex;
layout(binding = 6, r8) uniform writeonly image2D outputImage;

vec3 fetchEyePosition(vec2 texCoord, float depthValue) {
    vec4 texPosition = vec4(
        texCoord.s * 2.0 - 1.0,
        texCoord.t * 2.0 - 1.0,
        depthValue,
        1.0);
    vec4 position = projection.mInverseProjection * texPosition;
    position /= position.w;
    return vec3(position);
}

vec3 fetchPosition(vec2 texCoord, float depthValue) {
    vec4 texPosition = vec4(
        texCoord.s * 2.0 - 1.0,
        texCoord.t * 2.0 - 1.0,
        depthValue,
        1.0);
    vec4 position = positioningData.mInverseViewProjection * texPosition;
    position /= position.w;
    return vec3(position);
}

void main() {
    ivec2 texSize = imageSize(outputImage);
    ivec2 threadPos = ivec2(gl_GlobalInvocationID.xy);
    if (threadPos.x >= texSize.x || threadPos.y >= texSize.y) {
        return;
    }
    vec2 texCoordinates = (vec2(threadPos) + 0.5) / vec2(texSize);

    vec4 normalAndAmbient = vec4(texture(normalAndAmbientTex, texCoordinates));
    if (normalAndAmbient.a >= 0.9999) { //no lighting
        imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0));
        return;
    }

    float depthValue = texture(depthTex, texCoordinates).r;
    float distance = abs(fetchEyePosition(texCoordinates, depthValue).z);
    if (distance > DISTANCE_END_ATTENUATION) {
        imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0));
        return;
    }

    vec3 position = fetchPosition(texCoordinates, depthValue);
    vec3 normal = normalAndAmbient.xyz * 2.0 - 1.0;
    float randomTexCoordinateX = fract(position.x * 4.12); //random but stable when moving the camera
    float randomTexCoordinateY = fract(position.y * 3.12); //random but stable when moving the camera
    vec3 randomVector = normalize(texture(noiseTex, vec2(randomTexCoordinateX, randomTexCoordinateY)).xyz * 2.0 - 1.0);

    vec3 tangent = normalize(randomVector - dot(randomVector, normal) * normal);
    vec3 bitangent = cross(normal, tangent);
    mat3 kernelMatrix = mat3(tangent, bitangent, normal);

    float distanceBias = (distance * BIAS_DISTANCE_MULTIPLIER) * BIAS_MULTIPLIER; //increase bias with distance due to float imprecision

    float occlusion = 0.0;
    for (int i = 0; i < KERNEL_SAMPLES; ++i) {
        vec3 sampleVectorWorldSpace = normalize(kernelMatrix * kernelData.samples[i].xyz);
        vec3 samplePointWorldSpace = position + RADIUS * sampleVectorWorldSpace;
        vec4 samplePointViewSpace = positioningData.mView * vec4(samplePointWorldSpace, 1.0);
        vec4 samplePointClipSpace = projection.mProjection * samplePointViewSpace;
        vec3 samplePointNDC = samplePointClipSpace.xyz / samplePointClipSpace.w;
        vec2 samplePointTexCoord = samplePointNDC.xy * 0.5 + 0.5;

        float zSceneNDC = texture(depthTex, samplePointTexCoord).r;
        vec3 scenePositionViewSpace = fetchEyePosition(samplePointTexCoord, zSceneNDC);

        float rangeCheck = smoothstep(0.0, 1.0, RADIUS / abs(scenePositionViewSpace.z - samplePointViewSpace.z));
        occlusion += (scenePositionViewSpace.z >= samplePointViewSpace.z + distanceBias ? rangeCheck : 0.0);
    }

    float aoValue = occlusion / float(KERNEL_SAMPLES);
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(aoValue));
}
