#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "_samplingFunctions.frag"

layout(constant_id = 0) const uint QUALITY_TEXTURE_FETCH = 0;

layout(local_size_x = 8, local_size_y = 8) in;
layout(std140, set = 0, binding = 0) uniform Tex {
    vec2 texelSize;
} tex;
layout(binding = 1) uniform sampler2D stepTexture;
layout(binding = 2, r11f_g11f_b10f) uniform writeonly image2D outputImage;

void main() {
    ivec2 texSize = imageSize(outputImage);
    ivec2 threadPos = ivec2(gl_GlobalInvocationID.xy);
    if (threadPos.x >= texSize.x || threadPos.y >= texSize.y) {
        return;
    }
    vec2 texCoordinates = vec2(threadPos) / vec2(texSize);

    vec3 texValue;
    if (QUALITY_TEXTURE_FETCH == 0) {
        texValue = downSampleBlur13Fetch(stepTexture, texCoordinates, tex.texelSize);
    } else if (QUALITY_TEXTURE_FETCH == 1) {
        texValue = downSampleBlur4Fetch(stepTexture, texCoordinates, tex.texelSize);
    } else if (QUALITY_TEXTURE_FETCH == 2) {
        texValue = texture(stepTexture, texCoordinates).rgb;
    }

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(texValue, 1.0));
}
