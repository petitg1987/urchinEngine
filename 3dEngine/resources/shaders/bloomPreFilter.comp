#version 460
#extension GL_ARB_separate_shader_objects : enable

#include "_samplingFunctions.frag"

layout(constant_id = 0) const uint QUALITY_TEXTURE_FETCH = 0;

layout(local_size_x = 8, local_size_y = 8) in;
layout(std140, set = 0, binding = 0) uniform PreFilterTweak {
    vec3 softCurveParams;
    float threshold;
} preFilterTweak;
layout(std140, set = 0, binding = 1) uniform Tex {
    vec2 texelSize;
} tex;
layout(binding = 2) uniform sampler2D inputHdrTexture;
layout(binding = 3, r11f_g11f_b10f) uniform writeonly image2D outputImage;

float computeSoftContribution(float brightness) {
    //See /scene/renderer3d/postprocess/bloom/_doc/bloomPrefilterFormula.ods for formula details
    float underThresholdContribution = preFilterTweak.softCurveParams.z * pow(clamp(brightness - preFilterTweak.softCurveParams.x, 0.0, preFilterTweak.softCurveParams.y), 2.0);
    return max(underThresholdContribution, brightness - preFilterTweak.threshold) / max(brightness, 0.0001);
}

void main() {
    ivec2 texSize = imageSize(outputImage);
    ivec2 threadPos = ivec2(gl_GlobalInvocationID.xy);
    if (threadPos.x >= texSize.x || threadPos.y >= texSize.y) {
        return;
    }
    vec2 texCoordinates = (vec2(threadPos) + 0.5) / vec2(texSize);

    vec3 hdrColor;
    if (QUALITY_TEXTURE_FETCH == 0) {
        hdrColor = downSampleBlur13Fetch(inputHdrTexture, texCoordinates, tex.texelSize);
    } else if (QUALITY_TEXTURE_FETCH == 1) {
        hdrColor = downSampleBlur4Fetch(inputHdrTexture, texCoordinates, tex.texelSize);
    } else if (QUALITY_TEXTURE_FETCH == 2) {
        hdrColor = texture(inputHdrTexture, texCoordinates).rgb;
    }

    float brightness = max(max(hdrColor.x, hdrColor.y), hdrColor.z);
    float contribution = computeSoftContribution(brightness);

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(hdrColor * contribution, 1.0));
}
